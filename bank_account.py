# -*- coding: utf-8 -*-
"""bank_account.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hU9bDGX_YT9nDr7OGcRjK0MeG9C26lj-
"""

class BankAccount:
  def __init__(self, account_number, account_balance, name ): #constructor initializes, class called it runs
    self.account_number = account_number
    self.balance= account_balance
    self.name = name
    self.transaction = []

  def deposit(self):
    x=int(input('enter desired deposit: ')) #user inputs deposit
    self.balance +=x #add deposit to current balance
    self.transaction.append(f'your deposit was {x}')
    return self.balance #return new balance

  def withdraw(self):
    x=int(input('eneter desired withdrawal: '))
    self.balance -=x
    self.transaction.append(f'your withdrawal was {x}')
    return self.balance
    
  def getBalance(self): #functions not name with underscore
    choice=input('would you like to see balance: ')
    if choice == 'yes':
      print (self.balance)
    else:
      return

  def transfer(self):
    pass #go next
  
  def print_statement(self):
      bank_out=input('are you done with your transactions: ').lower()
      if bank_out=='yes':
        print(self.transaction)

p1 = BankAccount(12131, 100000, "Paul") #format is object- class name then parameters
p1.deposit()
p1.withdraw()
p1.getBalance()
p1.transfer()
p1.print_statement()

t,f=True,False
print(t and f)
print (t and f or t and f)
print(not t)
print(2!=3)
#anything 0,empty = false
#anything greater than 1, string = true

hello='hello'
world='world'
print(hello,len(world))
frstnm='craig'
lstnm='celestin'
print(len(frstnm + lstnm))
print("%s %s" % ("Hello", "World"))

hw=hello+' '+world
firstnm='Craig'
print(hw)
print(f'im: {firstnm}, first name has: {len(firstnm)} characters')
print("who's dat %s %s !" % ("Lebron", "James"))

in1=(input('what is your name: '))
strl=len(in1)
slstr=in1[strl::-1]
print(f'reverse is {slstr} and word count is {strl}')

#function can be called with anything, method has a . before it, function is an activated block of code//function is tied to an object/behavior
#python tries to autofinish methods as user attempts to program

s="iced out, hello"
print(s)
#print(s.capitalize())
#print(s.upper())
#print(s.center(7))
#print(s.replace('1','(ell)'))
print(' world'.strip())

d = {'cat': 'cute', 'dog': 'furry'}  # Create a new dictionary with some data
print(d['cat'])       # Get an entry from a dictionary; prints "cute"
print('cat' in d)     # Check if a dictionary has a given key; prints "True"
list_of_names=["Craig","Alex","Dilobar"]
print("Hector" in list_of_names)
list_of_names.append("Daniel")
list_of_names[2]="Lana"
print(list_of_names)



class Person:
  def __init__(self, name, age):
    self.name = name
    self.age = age

  def myfunc(self):
    print("Hello my name is " + self.name)

p1 = Person("John", 36)
p1.myfunc()
#for class think about constructor - run a class that is initalized, attributes, and methods
#static variables - variables that all classes have access to