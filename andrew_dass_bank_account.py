# -*- coding: utf-8 -*-
"""Andrew Dass Bank Account.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1fxvObUrfC1AgfisUbykb2wJHJMUABEeT
"""

#Andrew Dass

#class BankAccount:
  '''
  Add Attributes:
    Account number
    Balance 
    Name
    transactions[]
  Operations:
    deposit
    withdraw
    get_balance
    transfer
  '''

  "Keep a record of transactions"

#Define the class

class BankAccount: 

#Define the initialize function with variables
  def __init__(self,first_name,last_name,name_of_bank,account_num,balance,deposit,withdraw,transfer,get_balance):
    self.first_name = first_name
    self.last_name = last_name
    self.name_of_bank = name_of_bank
    self.account_num = account_num
    self.balance = balance
    self.deposit = deposit
    self.withdraw = withdraw
    self.transfer = transfer
    self.get_balance = get_balance


  def First_Name(self, name):
    return self.first_name

  def Last_Name(self,last_name):
    return self.last_name

  def BankName(self, name_of_bank):
    return self.name_of_bank

  def Account_Num(self, account_num):
    return self.account_num

  def Balance(self, balance):
    return self.balance

  def Deposit(self, deposit):
    self.balance = self.balance + self.deposit
    return self.balance

  def Withdraw(self, withdraw):
    self.balance = self.balance - self.withdraw
    return self.balance

  def Transfer(self, transfer):
    self.balance = self.balance - self.transfer #overwrite self.transfer
    return self.transfer  

  def Get_Balance(self, get_balance):
    self.get_balance = self.balance
    return self.get_balance

#Inputs for the functions above

#Enter your name
print("This is just a demonstration of how a real bank account could possibly function. DO NOT PUT ANY REAL INFO FOR ANY OF THESE QUESTIONS.")
name_of_account = input("Enter your first name")

#Enter your last name
last_name_of_account = input("Enter your last name")

#Bank name
enter_bank_name = input("What is the name of the bank?")

#Enter Account Number
acc_num = int(input("Enter your account number:"))
while len(str(acc_num)) != 9:
  acc_num = int(input("Please enter a 9 digit account number:"))

#Predefined Money Balances
balance = 200.0
bank_account_2_money = 0

#Deposit:
deposit_money = float(input("How much money will you deposit today:"))
while deposit_money <= 0:
  deposit_money = float(input("Invalid amount. Enter a value greater than 0"))
balance = balance + deposit_money

#Withdrawing:
withdraw_money = float(input("How much money will you withdraw today:"))
while (withdraw_money > balance):
  withdraw_money = float(input("Cannot withdraw amount that exceeds current balance. Insert a smaller number."))
balance = balance - withdraw_money

#Transfer
transfer_to_another_account = input("Would you like to transfer funds to another account? The program will only accept Y or y as yes:")

if transfer_to_another_account == 'Y' or transfer_to_another_account == 'y':
  to_which_other_bank_account = int(input("Enter the other bank account number"))

  while len(str(to_which_other_bank_account)) != 9 and str(to_which_other_bank_account != str(acc_num)):
    to_which_other_bank_account = int(input("Please enter a 9 digit account number that is not yours:"))

  ask_transfer = int(input("Enter the amount of money to send to the other bank account:"))
  while ask_transfer > balance:
    ask_transfer = ("Enter a number smaller than your balance")
  bank_account_2_money = ask_transfer + bank_account_2_money
  balance = balance - ask_transfer


#Balance
current_balance = balance

#Initiate Variable to run the BankAccount Class
Bank_Acc_1 = BankAccount(name_of_account, last_name_of_account, enter_bank_name, acc_num, balance, deposit_money, withdraw_money, bank_account_2_money, current_balance)

#Methodology
#print statement allows strings to be printed with the desired statements because of string concatencation
#Defined the variable Bank_Acc_1 to access BankAccount class and memory of self variables defined
#Run Defined variable - Bank_Acc_1. + withselfvariable = Bank_Acc_1.name = output
#Numerical values need an extra () next to the class 

#Return Classes
#Initaited variable, function in class and sometimes the variable declared
print("First Name:",Bank_Acc_1.first_name)     
print("Last name:",Bank_Acc_1.last_name)
print("Bank:",Bank_Acc_1.name_of_bank)
print('Account Number:',Bank_Acc_1.Account_Num(acc_num))
print("Balance:",Bank_Acc_1.Balance(balance))
print("Balance after deposit:",Bank_Acc_1.Deposit(balance))
print("Balance after withdrawing:",Bank_Acc_1.Withdraw(balance))
print("Transfer:", Bank_Acc_1.Transfer(bank_account_2_money))


print("New balance after changes:", Bank_Acc_1.Get_Balance(balance))


#problems:
#Readability 
#I set a balance, but every time I run the code, its a random number and not 200 dollars
#Strings equal each other despite doing !=

def multiply():
  num1 = int(input("Enter the first number:"))
  num2 = int(input("Enter the second number:"))

  a = num1 * num2
  return a

multiply()

type(a)

type(3)

b = input()
type(b)

b = int(b) #Casting
type(b)

int(input(""))